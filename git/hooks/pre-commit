#!/usr/bin/env bash

# toolchain-avr-gcc
#
# Copyright 2019 Andrew Countryman <apcountryman@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# File: git/hooks/pre-commit
# Description: Git pre-commit hook script for the toolchain-avr-gcc repository.

function abort()
{
    exit 1
}

function error()
{
    local param_message; declare -r param_message="$1"

    ( >&2 echo "$MNEMONIC: $param_message" )
}

function message()
{
    local param_content; declare -r param_content="$1"

    echo -n "$MNEMONIC: $param_content"
}

function display_help_text()
{
    echo "NAME"
    echo "    $MNEMONIC - Execute the toolchain-avr-gcc repository's Git pre-commit hook."
    echo "SYNOPSIS"
    echo "    $MNEMONIC --help"
    echo "    $MNEMONIC [--jobs <jobs>]"
    echo "OPTIONS"
    echo "    --help"
    echo "        Display this help text."
    echo "    --jobs <jobs>"
    echo "        Set the number of make jobs to use when building. If the number of jobs"
    echo "        is not specified, nproc - 1 jobs will be used."
    echo "EXAMPLES"
    echo "    $MNEMONIC --help"
    echo "    $MNEMONIC"
    echo "    $MNEMONIC --jobs 1"
}

function ensure_filenames_are_portable()
{
    message "checking for non-portable (non-ASCII) filenames .................. "

    if [[ $( git diff --cached --name-only --diff-filter=A -z $AGAINST | LC_ALL=C tr -d '[ -~]\0' | wc -c ) != 0 ]]; then
        echo "error(s) found"
        error "aborting commit due to non-portable (non-ASCII) filename(s)"
        abort
    fi

    echo "none"
}

function ensure_no_whitespace_errors_are_present()
{
    message "checking for whitespace errors ................................... "

    if ! git diff-index --check --cached $AGAINST -- >/dev/null 2>&1; then
        echo "error(s) found"
        error "aborting commit due to whitespace error(s), listed below"
        git diff-index --check --cached $AGAINST --
        abort
    fi

    echo "none"
}

function ensure_build_succeeds()
{
    local param_name;       declare -r param_name="$1"
    local param_ellipsis;   declare -r param_ellipsis="$2"
    local param_build_name; declare -r param_build_name="$3"

    local build_directory; declare -r build_directory="$REPOSITORY"/examples/build/"$param_build_name"
    local cmake_options;   declare -r cmake_options="-C $REPOSITORY/examples/configuration/CMakeLists.txt.$param_build_name"

    message "checking for build ($param_name) errors $param_ellipsis "

    if [[ ! -d "$build_directory" ]]; then
        if ! mkdir -p "$build_directory" >/dev/null 2>&1; then
            echo "error(s) found"
            error "aborting commit due to build ($param_name) directory creation error(s), listed below"
            mkdir -p "$build_directory"
            abort
        fi

        cd "$build_directory"

        if ! cmake -DCMAKE_TOOLCHAIN_FILE="$REPOSITORY"/toolchain.cmake $cmake_options "$REPOSITORY"/examples >/dev/null 2>&1; then
            echo "error(s) found"
            error "aborting commit due to build ($param_name) CMake error(s), listed below"
            rm -rf *
            cmake -DCMAKE_TOOLCHAIN_FILE="$REPOSITORY"/toolchain.cmake $cmake_options "$REPOSITORY"/examples
            abort
        fi
    fi

    cd "$build_directory"

    if ! cmake $cmake_options . >/dev/null 2>&1; then
        echo "error(s) found"
        error "aborting commit due to build ($param_name) CMake error(s), listed below"
        cmake $cmake_options .
        abort
    fi

    if ! make "$JOBS" --quiet >/dev/null 2>&1; then
        echo "error(s) found"
        error "aborting commit due to build ($param_name) make error(s), listed below"
        make "$JOBS"
        abort
    fi

    echo "none"
}

function ensure_atmega2560_arduino_mega_2560_build_succeeds()
{
    local name;       declare -r name="ATmega2560, Arduino Mega 2560"
    local ellipsis;   declare -r ellipsis="........"
    local build_name; declare -r build_name="atmega2560-arduino-mega-2560"

    ensure_build_succeeds "$name" "$ellipsis" "$build_name"
}

function ensure_atmega328p_adafruit_feather_328p_build_succeeds()
{
    local name;       declare -r name="ATmega328/P, Adafruit Feather 328P"
    local ellipsis;   declare -r ellipsis="..."
    local build_name; declare -r build_name="atmega328p-adafruit-feather-328p"

    ensure_build_succeeds "$name" "$ellipsis" "$build_name"
}

function ensure_atmega328p_adafruit_metro_mini_build_succeeds()
{
    local name;       declare -r name="ATmega328/P, Adafruit Metro Mini"
    local ellipsis;   declare -r ellipsis="....."
    local build_name; declare -r build_name="atmega328p-adafruit-metro-mini"

    ensure_build_succeeds "$name" "$ellipsis" "$build_name"
}

function ensure_atmega328p_arduino_uno_build_succeeds()
{
    local name;       declare -r name="ATmega328/P, Arduino Uno"
    local ellipsis;   declare -r ellipsis="............."
    local build_name; declare -r build_name="atmega328p-arduino-uno"

    ensure_build_succeeds "$name" "$ellipsis" "$build_name"
}

function main()
{
    declare -r SCRIPT=$( readlink -f $0 )
    declare -r REPOSITORY=$( dirname $SCRIPT )/../..
    declare -r MNEMONIC=$( basename $SCRIPT )

    JOBS="-j$(( $( nproc ) - 1 ))"

    while [[ $# -gt 0 ]]; do
        local argument; argument="$1"
        shift

        case $argument in
            --help)
                display_help_text
                exit
                ;;
            --jobs)
                if [[ $# -eq 0 ]]; then
                    error "job count not specified, aborting"
                    abort
                fi

                JOBS="-j$1"
                shift
                ;;
            --*)
                ;&
            -*)
                error "'$argument' is not a supported option, aborting"
                abort
                ;;
            *)
                error "'$argument' is not a valid argument, aborting"
                abort
                ;;
        esac
    done

    if git rev-parse --verify HEAD >/dev/null 2>&1; then
        declare -r AGAINST=HEAD
    else
        declare -r AGAINST=$( git hash-object -t tree /dev/null )
    fi

    ensure_filenames_are_portable
    ensure_no_whitespace_errors_are_present
    ensure_atmega2560_arduino_mega_2560_build_succeeds
    ensure_atmega328p_adafruit_feather_328p_build_succeeds
    ensure_atmega328p_adafruit_metro_mini_build_succeeds
    ensure_atmega328p_arduino_uno_build_succeeds
}

main "$@"
